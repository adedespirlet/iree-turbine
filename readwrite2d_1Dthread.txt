============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.0.0, pluggy-1.5.0
rootdir: /home/aurore/git/iree-turbine
configfile: setup.cfg
plugins: xdist-3.5.0
collected 1 item

tests/kernel/wave/attention/scatter_test.py #map = affine_map<()[s0] -> (s0 + (s0 floordiv 64) * 8)>
#map1 = affine_map<()[s0] -> (s0 + (s0 floordiv 64) * 8 + 1)>
#map2 = affine_map<()[s0] -> (s0 + (s0 floordiv 64) * 8 + 2)>
#map3 = affine_map<()[s0] -> (s0 + (s0 floordiv 64) * 8 + 3)>
#map4 = affine_map<()[s0] -> (s0 + (s0 floordiv 64) * 8 + 4)>
#map5 = affine_map<()[s0] -> (s0 + (s0 floordiv 64) * 8 + 5)>
#map6 = affine_map<()[s0] -> (s0 + (s0 floordiv 64) * 8 + 6)>
#map7 = affine_map<()[s0] -> (s0 + (s0 floordiv 64) * 8 + 7)>
#translation = #iree_codegen.translation_info<pipeline = None workgroup_size = [64, 1, 1] subgroup_size = 64>
module attributes {transform.with_named_sequence} {
  stream.executable private @read_kernel {
    stream.executable.export public @read_kernel workgroups() -> (index, index, index) {
      %c1 = arith.constant 1 : index
      stream.return %c1, %c1, %c1 : index, index, index
    }
    builtin.module {
      func.func @read_kernel(%arg0: !stream.binding, %arg1: !stream.binding, %arg2: !stream.binding, %arg3: !stream.binding) attributes {translation_info = #translation} {
        %c7 = arith.constant 7 : index
        %c6 = arith.constant 6 : index
        %c5 = arith.constant 5 : index
        %c4 = arith.constant 4 : index
        %c3 = arith.constant 3 : index
        %c2 = arith.constant 2 : index
        %c1 = arith.constant 1 : index
        %c0 = arith.constant 0 : index
        %thread_id_x = gpu.thread_id  x
        %0 = stream.binding.subspan %arg0[%c0] : !stream.binding -> memref<8x8xi32, strided<[8, 1], offset: ?>>
        %1 = affine.apply #map()[%thread_id_x]
        %2 = vector.load %0[%1, %c0] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        %3 = vector.load %0[%1, %c1] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        %4 = vector.load %0[%1, %c2] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        %5 = vector.load %0[%1, %c3] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        %6 = vector.load %0[%1, %c4] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        %7 = vector.load %0[%1, %c5] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        %8 = vector.load %0[%1, %c6] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        %9 = vector.load %0[%1, %c7] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>

        each thread will load all values in a row its assigned => ideally load multiple in vector directly
        only 8 rows so only 8 threads needed=> using 64threads so 56 threads are doing redundant work
        too many threads working on the rows 


        ##redundant:
        
        %10 = affine.apply #map1()[%thread_id_x]
        %11 = vector.load %0[%10, %c0] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        %12 = vector.load %0[%10, %c1] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        %13 = vector.load %0[%10, %c2] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        %14 = vector.load %0[%10, %c3] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        %15 = vector.load %0[%10, %c4] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        %16 = vector.load %0[%10, %c5] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        %17 = vector.load %0[%10, %c6] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        %18 = vector.load %0[%10, %c7] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        %19 = affine.apply #map2()[%thread_id_x]
        %20 = vector.load %0[%19, %c0] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        %21 = vector.load %0[%19, %c1] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        %22 = vector.load %0[%19, %c2] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        %23 = vector.load %0[%19, %c3] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        %24 = vector.load %0[%19, %c4] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        %25 = vector.load %0[%19, %c5] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        %26 = vector.load %0[%19, %c6] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        %27 = vector.load %0[%19, %c7] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        %28 = affine.apply #map3()[%thread_id_x]
        %29 = vector.load %0[%28, %c0] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        %30 = vector.load %0[%28, %c1] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        %31 = vector.load %0[%28, %c2] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        %32 = vector.load %0[%28, %c3] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        %33 = vector.load %0[%28, %c4] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        %34 = vector.load %0[%28, %c5] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        %35 = vector.load %0[%28, %c6] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        %36 = vector.load %0[%28, %c7] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        %37 = affine.apply #map4()[%thread_id_x]
        %38 = vector.load %0[%37, %c0] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        %39 = vector.load %0[%37, %c1] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        %40 = vector.load %0[%37, %c2] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        %41 = vector.load %0[%37, %c3] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        %42 = vector.load %0[%37, %c4] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        %43 = vector.load %0[%37, %c5] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        %44 = vector.load %0[%37, %c6] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        %45 = vector.load %0[%37, %c7] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        %46 = affine.apply #map5()[%thread_id_x]
        %47 = vector.load %0[%46, %c0] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        %48 = vector.load %0[%46, %c1] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        %49 = vector.load %0[%46, %c2] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        %50 = vector.load %0[%46, %c3] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        %51 = vector.load %0[%46, %c4] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        %52 = vector.load %0[%46, %c5] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        %53 = vector.load %0[%46, %c6] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        %54 = vector.load %0[%46, %c7] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        %55 = affine.apply #map6()[%thread_id_x]
        %56 = vector.load %0[%55, %c0] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        %57 = vector.load %0[%55, %c1] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        %58 = vector.load %0[%55, %c2] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        %59 = vector.load %0[%55, %c3] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        %60 = vector.load %0[%55, %c4] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        %61 = vector.load %0[%55, %c5] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        %62 = vector.load %0[%55, %c6] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        %63 = vector.load %0[%55, %c7] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        %64 = affine.apply #map7()[%thread_id_x]
        %65 = vector.load %0[%64, %c0] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        %66 = vector.load %0[%64, %c1] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        %67 = vector.load %0[%64, %c2] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        %68 = vector.load %0[%64, %c3] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        %69 = vector.load %0[%64, %c4] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        %70 = vector.load %0[%64, %c5] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        %71 = vector.load %0[%64, %c6] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        %72 = vector.load %0[%64, %c7] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        %73 = stream.binding.subspan %arg3[%c0] : !stream.binding -> memref<8x8xi32, strided<[8, 1], offset: ?>>
        vector.store %2, %73[%1, %c0] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        vector.store %3, %73[%1, %c1] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        vector.store %4, %73[%1, %c2] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        vector.store %5, %73[%1, %c3] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        vector.store %6, %73[%1, %c4] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        vector.store %7, %73[%1, %c5] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        vector.store %8, %73[%1, %c6] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        vector.store %9, %73[%1, %c7] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        vector.store %11, %73[%10, %c0] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        vector.store %12, %73[%10, %c1] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        vector.store %13, %73[%10, %c2] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        vector.store %14, %73[%10, %c3] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        vector.store %15, %73[%10, %c4] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        vector.store %16, %73[%10, %c5] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        vector.store %17, %73[%10, %c6] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        vector.store %18, %73[%10, %c7] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        vector.store %20, %73[%19, %c0] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        vector.store %21, %73[%19, %c1] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        vector.store %22, %73[%19, %c2] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        vector.store %23, %73[%19, %c3] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        vector.store %24, %73[%19, %c4] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        vector.store %25, %73[%19, %c5] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        vector.store %26, %73[%19, %c6] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        vector.store %27, %73[%19, %c7] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        vector.store %29, %73[%28, %c0] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        vector.store %30, %73[%28, %c1] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        vector.store %31, %73[%28, %c2] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        vector.store %32, %73[%28, %c3] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        vector.store %33, %73[%28, %c4] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        vector.store %34, %73[%28, %c5] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        vector.store %35, %73[%28, %c6] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        vector.store %36, %73[%28, %c7] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        vector.store %38, %73[%37, %c0] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        vector.store %39, %73[%37, %c1] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        vector.store %40, %73[%37, %c2] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        vector.store %41, %73[%37, %c3] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        vector.store %42, %73[%37, %c4] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        vector.store %43, %73[%37, %c5] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        vector.store %44, %73[%37, %c6] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        vector.store %45, %73[%37, %c7] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        vector.store %47, %73[%46, %c0] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        vector.store %48, %73[%46, %c1] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        vector.store %49, %73[%46, %c2] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        vector.store %50, %73[%46, %c3] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        vector.store %51, %73[%46, %c4] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        vector.store %52, %73[%46, %c5] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        vector.store %53, %73[%46, %c6] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        vector.store %54, %73[%46, %c7] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        vector.store %56, %73[%55, %c0] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        vector.store %57, %73[%55, %c1] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        vector.store %58, %73[%55, %c2] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        vector.store %59, %73[%55, %c3] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        vector.store %60, %73[%55, %c4] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        vector.store %61, %73[%55, %c5] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        vector.store %62, %73[%55, %c6] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        vector.store %63, %73[%55, %c7] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        vector.store %65, %73[%64, %c0] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        vector.store %66, %73[%64, %c1] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        vector.store %67, %73[%64, %c2] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        vector.store %68, %73[%64, %c3] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        vector.store %69, %73[%64, %c4] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        vector.store %70, %73[%64, %c5] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        vector.store %71, %73[%64, %c6] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        vector.store %72, %73[%64, %c7] : memref<8x8xi32, strided<[8, 1], offset: ?>>, vector<1xi32>
        return
      }
    }
  }
  func.func @isolated_benchmark(%arg0: tensor<8x8xi32>, %arg1: tensor<8xi32>, %arg2: tensor<8x8xi32>, %arg3: tensor<8x8xi32>) -> tensor<8x8xi32> {
    %0 = flow.dispatch @read_kernel::@read_kernel(%arg0, %arg1, %arg2, %arg3) : (tensor<8x8xi32>, tensor<8xi32>, tensor<8x8xi32>, tensor<8x8xi32>) -> %arg3
    return %0 : tensor<8x8xi32>
  }
}

Input a:
tensor([[ 0,  1,  2,  3,  4,  5,  6,  7],
        [ 8,  9, 10, 11, 12, 13, 14, 15],
        [16, 17, 18, 19, 20, 21, 22, 23],
        [24, 25, 26, 27, 28, 29, 30, 31],
        [32, 33, 34, 35, 36, 37, 38, 39],
        [40, 41, 42, 43, 44, 45, 46, 47],
        [48, 49, 50, 51, 52, 53, 54, 55],
        [56, 57, 58, 59, 60, 61, 62, 63]], dtype=torch.int32)
Output:
tensor([[ 0,  1,  2,  3,  4,  5,  6,  7],
        [ 8,  9, 10, 11, 12, 13, 14, 15],
        [16, 17, 18, 19, 20, 21, 22, 23],
        [24, 25, 26, 27, 28, 29, 30, 31],
        [32, 33, 34, 35, 36, 37, 38, 39],
        [40, 41, 42, 43, 44, 45, 46, 47],
        [48, 49, 50, 51, 52, 53, 54, 55],
        [56, 57, 58, 59, 60, 61, 62, 63]], dtype=torch.int32)
✅ Test passed! All values scattered correctly.
.

============================== 1 passed in 2.86s ===============================
